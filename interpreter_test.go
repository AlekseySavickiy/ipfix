package ipfix

import (
	"bytes"
	"encoding/hex"
	"net"
	"reflect"
	"testing"
)

func TestInterpretUint(t *testing.T) {
	bs := []byte{0xf7, 2, 3, 4, 5, 6, 7, 8}
	v := interpretBytes(bs, Uint64)
	if v != uint64(0xf702030405060708) {
		t.Errorf("%d != %d", v, uint64(0x0102030405060708))
	}

	bs = []byte{0xf7, 2, 3, 4}
	v = interpretBytes(bs, Uint32)
	if v != uint32(0xf7020304) {
		t.Errorf("%d != %d", v, 0x01020304)
	}

	bs = []byte{0xf7, 4}
	v = interpretBytes(bs, Uint16)
	if v != uint16(0xf704) {
		t.Errorf("%d != %d", v, 0x0104)
	}

	bs = []byte{0xf7}
	v = interpretBytes(bs, Uint8)
	if v != uint8(0xf7) {
		t.Errorf("%d != %d", v, 0xf7)
	}
}

func TestInterpretInt(t *testing.T) {
	bs := []byte{1, 2, 3, 4, 5, 6, 7, 8}
	v := interpretBytes(bs, Int64)
	if v != int64(0x0102030405060708) {
		t.Errorf("%d != %d", v, uint64(0x0102030405060708))
	}

	bs = []byte{1, 2, 3, 4}
	v = interpretBytes(bs, Int32)
	if v != int32(0x01020304) {
		t.Errorf("%d != %d", v, 0x01020304)
	}

	bs = []byte{1, 4}
	v = interpretBytes(bs, Int16)
	if v != int16(0x0104) {
		t.Errorf("%d != %d", v, 0x0104)
	}

	bs = []byte{14}
	v = interpretBytes(bs, Int8)
	if v != int8(14) {
		t.Errorf("%d != %d", v, 14)
	}
}

func TestInterpretBool(t *testing.T) {
	bs := []byte{8}
	v := interpretBytes(bs, Boolean)
	if v != true {
		t.Errorf("%d != %d", v, true)
	}

	bs = []byte{0}
	v = interpretBytes(bs, Boolean)
	if v != false {
		t.Errorf("%d != %d", v, true)
	}
}

func TestInterpretString(t *testing.T) {
	bs := []byte{0x48, 0x61, 0x6c, 0x6c, 0xc3, 0xa5, 0x0a}
	v := interpretBytes(bs, String)
	if v != "Hallå\n" {
		t.Errorf("%d != %d", v, "Hallå\n")
	}
}

func TestInterpret(t *testing.T) {
	p0, _ := hex.DecodeString("000a008c51ec4264000000000b20bdbe0002007c283b0008001c0010800c000400003c258003000800003c258004000800003c258012ffff00003c258001ffff00003c25801cffff00003c25001b0010c2ac0008000c0004800c000400003c258003000800003c258004000800003c258012ffff00003c258001ffff00003c25801cffff00003c2500080004")
	p1, _ := hex.DecodeString("000a05b051ec4270000000000b20bdbec2ac05a0ac10200f0000000000000000000000910000000000000136000f426974546f7272656e74204b525043000116fcb8ac10200f00000000000000000000008c000000000000013a000f426974546f7272656e74204b525043005e489f46ac10200300000026000000000000019f0000000000000160000e4265696e6720616e616c797a656400c27ef905ac10200f0000000000000000000000910000000000000136000f426974546f7272656e74204b525043007aa7519c0808080800000000000000000000008d00000000000000550003444e5300ac102082ac10200f0000000000000000000000940000000000000147000f426974546f7272656e74204b52504300b228265c1859c1570000000000000000000000000000000000000064000f426974546f7272656e74204b52504300ac10200fac10200f0000000000000000000000920000000000000145000f426974546f7272656e74204b525043007b75a68ad92bb37f00000000000000000000006e0000000000000064000f426974546f7272656e74204b52504300ac10200fac10200f0000000000000000000000910000000000000136000f426974546f7272656e74204b525043004f972c247449d8f200000000000000000000006e0000000000000064000f426974546f7272656e74204b52504300ac10200fac10200f0000000000000000000000910000000000000136000f426974546f7272656e74204b5250430048b682a4ac10200f00000000000000000000008c000000000000013a000f426974546f7272656e74204b52504300595cc40dac10200f0000000000000000000000910000000000000136000f426974546f7272656e74204b5250430057451cc1ac10200f00000000000000000000008c000000000000013a000f426974546f7272656e74204b525043005465e5a8ac1020ff00000000000000000000000000000000000000af001a44726f70626f78204c414e2073796e6320646973636f766572790764726f70626f78ac102013ac10200f00000000000000000000008f000000000000014b000f426974546f7272656e74204b5250430001ab3c06ac10200f00000000000000000000008c000000000000013a000f426974546f7272656e74204b52504300befcacc8ffffffff00000000000000000000000000000000000000af001a44726f70626f78204c414e2073796e6320646973636f766572790764726f70626f78ac102013ac10200300000025000000000000019e0000000000000167000e4265696e6720616e616c797a656400c27ef905ac10200f0000000000000000000000910000000000000136000f426974546f7272656e74204b525043006ca28bcdac10200f000000000000000000000091000000000000011c000f426974546f7272656e74204b52504300b13531caac10200f000000000000000000000068000000000000005f000f426974546f7272656e74204b5250430053df9212ac10200f0000000000000000000000940000000000000159000f426974546f7272656e74204b525043005f43f0b2ac10200f0000000000000000000001220000000000000252000f426974546f7272656e74204b52504300567ce6fbac10200100000000000000000000005a000000000000005a00034e545000ac102080ac10200f00000000000000000000008c000000000000013a000f426974546f7272656e74204b5250430055550ef7ac10200f0000000000000000000000910000000000000136000f426974546f7272656e74204b52504300ba9322a2ac10200f0000000000000000000000910000000000000136000f426974546f7272656e74204b525043004579e7114b01bf5300000000000000000000006e0000000000000064000f426974546f7272656e74204b52504300ac10200fac10200f0000000000000000000000910000000000000136000f426974546f7272656e74204b525043005cf46adf")
	b := bytes.Buffer{}
	p := NewSession(&b)

	b.Write(p0)
	b.Write(p1)

	p.ReadMessage()
	msg, err := p.ReadMessage()
	if msg == nil || err != nil {
		t.Error("ReadMessage failed", err)
	}

	i := NewInterpreter(p)
	fields := i.Interpret(&msg.DataRecords[0])

	f0 := InterpretedField{Name: "destinationIPv4Address", FieldId: 12, EnterpriseId: 0, Value: net.IP{172, 16, 32, 15}}
	if !reflect.DeepEqual(fields[0], f0) {
		t.Error(fields[0], "!=", f0)
	}

	f1 := InterpretedField{Name: "", FieldId: 12, EnterpriseId: 15397, Value: "172.16.32.15"}
	if fields[1].Name != f1.Name ||
		fields[1].FieldId != f1.FieldId ||
		fields[1].EnterpriseId != f1.EnterpriseId ||
		len(fields[1].RawValue) != 4 {
		t.Error(fields[1], "!=", f1)
	}
}
