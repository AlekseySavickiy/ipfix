package main

import (
	"encoding/xml"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"time"
)

type ipfixRecord struct {
	Name      string `xml:"name"`
	ElementId string `xml:"elementId"`
	DataType  string `xml:"dataType"`
}

type ipfixRegistry struct {
	Id     string        `xml:"id,attr"`
	Record []ipfixRecord `xml:"record"`
}

type ipfixRegistryRoot struct {
	XMLName    xml.Name        `xml:"registry"`
	Id         string          `xml:"id,attr"`
	Title      string          `xml:"title"`
	Registries []ipfixRegistry `xml:"registry"`
}

func createIpfixRegistry(records []ipfixRecord) {

	dictFile, err := os.Create("builtin-dictionary.go")
	if err != nil {
		log.Fatalln(err)
	}
	defer dictFile.Close()

	dictFile.WriteString("package ipfix\n\n")
	dictFile.WriteString("// Autogenerated " + time.Now().Format(time.UnixDate) + "\n")
	dictFile.WriteString("var builtinDictionary = fieldDictionary{\n")
	for _, r := range records {

		if r.Name == "" || r.DataType == "" || r.ElementId == "" {
			continue
		}

		dictFile.WriteString(fmt.Sprintf("\tdictionaryKey{0, %3s}: DictionaryEntry{FieldID: %3s, Name: \"%s\", Type: FieldTypes[\"%s\"]},\n",
			strings.TrimSpace(r.ElementId),
			strings.TrimSpace(r.ElementId),
			strings.TrimSpace(r.Name),
			strings.TrimSpace(r.DataType)))
	}
	dictFile.WriteString("}\n")
}

func decodeIpfixXml() []ipfixRecord {

	ipfixFile, err := os.Open("ipfix.xml")
	if err != nil {
		log.Fatalln(err)
	}
	defer ipfixFile.Close()

	decoder := xml.NewDecoder(ipfixFile)
	var result ipfixRegistryRoot

	if err := decoder.Decode(&result); err != nil {
		log.Fatalln("Error decoding xml:", err)
	}

	for _, r := range result.Registries {
		if r.Id == "ipfix-information-elements" {
			return r.Record
		}
	}

	log.Fatalln("no registry with id ipfix-information-elements in ipfix.xml")
	return nil
}

func downloadIpfixXml() {

	res, err := http.Get("http://www.iana.org/assignments/ipfix/ipfix.xml")

	if err != nil {
		log.Fatalln("Error getting HEAD ipfix.xml:", err)
	}
	defer res.Body.Close()

	ipfixFile, err := os.Create("ipfix.xml")
	if err != nil {
		log.Fatalln(err)
	}
	defer ipfixFile.Close()

	n, err := io.Copy(ipfixFile, res.Body)
	if err != nil {
		log.Fatalln("Error storing file:", err)
	}
	log.Printf("Successfully downloaded ipfix.xml (%d bytes)\n", n)
}

func main() {
	downloadIpfixXml()
	records := decodeIpfixXml()
	createIpfixRegistry(records)
}
